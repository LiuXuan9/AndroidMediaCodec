apply plugin: 'com.android.library'

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 27
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        ndk {
            abiFilters 'armeabi-v7a'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets.main {
        jni.srcDirs = []//disable automatic ndk-build call 屏蔽gradle自动生成Android.mk
        jniLibs.srcDirs = ['libs']//这个脚本的意思是把app下的libs文件夹，当成原本/src/main下的jniLibs文件夹，这样就可以加载so库了。
    }

    externalNativeBuild {
        ndkBuild {
            path "jni/Android.mk"
        }
    }

    android.libraryVariants.all { variant ->
        def debugOrRelease = variant.name
        tasks.all {
            print "--------" + it.name
            if (it.name.equalsIgnoreCase("bundle${debugOrRelease.capitalize()}Aar")) {
                it.doLast {
//                    copyAarFiles(project.name, debugOrRelease)
                }
            }
        }
    }

}

task CopyToJniLibs(type: Copy, dependsOn: 'ndkBuild', description: 'copy the native libs to jniLibs') {
    from fileTree(dir: file(buildDir.absolutePath + '/libs'), include: '**/*.so')
    print "-------" + buildDir.absolutePath
    into file('libs')
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
}
